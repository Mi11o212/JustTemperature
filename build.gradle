buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.modrinth.minotaur:Minotaur:2.+'
        classpath 'gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:1.1.7' // Required for NeoGradle
    }
}

apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'

changelog {
    fromTag '9.2.0'
}

ext {
    mod_version = "1.0.0" // Replace with actual version logic if needed
    changelog_file = rootProject.file("build/changelog.txt")
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "400"
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'

    if (!project.name.equals("Common")) {
        apply plugin: 'com.modrinth.minotaur'
    }

    version = "${minecraft_version}-${mod_version}"

    java.toolchain.languageVersion = JavaLanguageVersion.of(21)
    java.withSourcesJar()

    jar {
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : mod_version,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
            ])
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release.set(21)
    }

    processResources {
        var expandProps = [
            minecraft_version   : minecraft_version,
            neoforge_version    : neoforge_version, neoforge_version_range: neoforge_version_range, neoforge_loader_version_range: neoforge_loader_version_range,
            glitchcore_version  : glitchcore_version, serene_seasons_version: serene_seasons_version,
            mod_id              : mod_id, mod_name: mod_name, mod_display_name: mod_display_name, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
            mod_issues_url      : mod_issues_url, mod_page_url: mod_page_url, mod_git_url: mod_git_url,
            mod_discord_url     : mod_discord_url,
            mod_license         : mod_license
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', "*.mixins.json"]) {
            expand expandProps
        }
        inputs.properties(expandProps)
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    afterEvaluate {
        if (!name.equals("Common")) {
            modrinth {
                token = findProperty('modrinthToken')
                projectId = mod_modrinth_id
                versionNumber = mod_version
                versionName = "${mod_version} for ${name} ${minecraft_version}"
                versionType = release_channel
                uploadFile = name.equals("Fabric") ? remapJar : jar
                gameVersions = [minecraft_version]
                loaders = [name.toLowerCase()]
                dependencies {
                    if (name.equals("Fabric")) {
                        required.project "fabric-api"
                    }
                    required.project "glitchcore"
                }

                if (changelog_file.exists()) {
                    changelog = changelog_file.text
                }
            }
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId project.archivesBaseName
                    groupId project.group
                    version project.version
                    from components.java

                    pom {
                        name = project.archivesBaseName
                        description = project.mod_description
                        url = project.mod_git_url
                        scm {
                            url = project.mod_git_url
                            connection = project.mod_scm_url
                            developerConnection = project.mod_scm_url
                        }
                        issueManagement {
                            system = 'github'
                            url = project.mod_issues_url
                        }
                        licenses {
                            license {
                                name = project.mod_license
                            }
                        }
                        developers {
                            developer {
                                id = 'adubbz'
                                name = 'Adubbz'
                            }
                            developer {
                                id = 'forstride'
                                name = 'Forstride'
                            }
                        }
                    }
                }
            }
        }
    }
}